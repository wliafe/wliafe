<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>wliafe</title><link>https://wliafe.github.io</link><description>一种生活，一种态度</description><copyright>wliafe</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://wliafe.github.io/wliafe.jpg</url><title>avatar</title><link>https://wliafe.github.io</link></image><lastBuildDate>Fri, 03 Jan 2025 11:19:40 +0000</lastBuildDate><managingEditor>wliafe</managingEditor><ttl>60</ttl><webMaster>wliafe</webMaster><item><title>Ubuntu</title><link>https://wliafe.github.io/post/Ubuntu.html</link><description># 包管理器&#13;
&#13;
Ubuntu包管理器有：apt, apt-cache, apt-get, dpkg&#13;
&#13;
```bash&#13;
#更新包管理器&#13;
apt update&#13;
#模糊查询软件&#13;
apt search 软件包&#13;
#安装软件&#13;
apt install 软件包&#13;
#下载软件源码&#13;
apt source 软件包&#13;
#卸载软件&#13;
apt-get remove 软件包&#13;
#查看已安装的软件包&#13;
dpkg -l&#13;
#查看软件包的依赖项&#13;
dpkg --list | grep 软件包&#13;
```&#13;
&#13;
# 防火墙&#13;
&#13;
Ubuntu防火墙是ufw&#13;
&#13;
```bash&#13;
#安装防火墙&#13;
apt install ufw&#13;
#防火墙状态&#13;
ufw status&#13;
#开启防火墙&#13;
ufw enable&#13;
#关闭防火墙&#13;
ufw disable&#13;
#查看防火墙版本&#13;
ufw version&#13;
#默认允许外部主机访问&#13;
ufw default allow&#13;
#默认拒绝外部主机访问&#13;
ufw default deny&#13;
#开启${port}端口&#13;
ufw allow ${port}/tcp&#13;
#关闭${port}端口&#13;
ufw deny ${port}/tcp&#13;
#展示已有防火墙规则&#13;
ufw status&#13;
```&#13;
&#13;
# 切换到root用户&#13;
&#13;
```bash&#13;
#修改root密码&#13;
sudo passwd root&#13;
#在当前用户临时进入root，使用当前用户的sudo密码&#13;
sudo -s&#13;
```。</description><guid isPermaLink="true">https://wliafe.github.io/post/Ubuntu.html</guid><pubDate>Thu, 02 Jan 2025 15:26:28 +0000</pubDate></item><item><title>Linux系统</title><link>https://wliafe.github.io/post/Linux-xi-tong.html</link><description># 简介&#13;
&#13;
linux操作系统的基本概念&#13;
&#13;
# 操作系统的核心——内核&#13;
&#13;
本文所说的操作系统是指管理和分配计算机资源的核心层软件。</description><guid isPermaLink="true">https://wliafe.github.io/post/Linux-xi-tong.html</guid><pubDate>Thu, 02 Jan 2025 15:25:40 +0000</pubDate></item><item><title>ESXI系统安装</title><link>https://wliafe.github.io/post/ESXI-xi-tong-an-zhuang.html</link><description># 简介&#13;
&#13;
为了将一台电脑分为多个服务器，我尝试安装esxi，尝试过许多教程，下面是对教程的整理。</description><guid isPermaLink="true">https://wliafe.github.io/post/ESXI-xi-tong-an-zhuang.html</guid><pubDate>Thu, 02 Jan 2025 15:24:14 +0000</pubDate></item><item><title>CentOS</title><link>https://wliafe.github.io/post/CentOS.html</link><description># centos镜像源更换&#13;
&#13;
**阿里云镜像**&#13;
&#13;
```bash&#13;
yum install wget&#13;
```&#13;
&#13;
```bash&#13;
rm /etc/yum.repos.d/CentOS-Base.repo&#13;
```&#13;
&#13;
```bash&#13;
sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo &#13;
```&#13;
&#13;
```bash&#13;
yum makecache&#13;
```&#13;
&#13;
# 包管理器&#13;
&#13;
## yum包管理器&#13;
&#13;
安装软件包&#13;
&#13;
```bash&#13;
yum install -y 软件包&#13;
```&#13;
&#13;
升级软件包，改变软件设置和系统设置，系统版本内核都升级&#13;
&#13;
```bash&#13;
yum update 软件包&#13;
```&#13;
&#13;
升级软件包，不改变软件设置和系统设置，系统版本内核都升级&#13;
&#13;
```bash&#13;
yum install upgrade&#13;
```&#13;
&#13;
模糊查询软件包&#13;
&#13;
```bash&#13;
yum search 软件包&#13;
```&#13;
&#13;
查询软件包&#13;
&#13;
```bash&#13;
yum info 软件包&#13;
```&#13;
&#13;
查询命令属于哪一个包&#13;
&#13;
```bash&#13;
yum provides /usr/bin/find&#13;
```&#13;
&#13;
卸载包&#13;
&#13;
```bash&#13;
yum remove -y 软件包&#13;
```&#13;
&#13;
按关键字搜索包&#13;
&#13;
```bash&#13;
yum search 软件包&#13;
```&#13;
&#13;
清除缓存&#13;
&#13;
```bash&#13;
yum clan all&#13;
```&#13;
&#13;
生成缓存&#13;
&#13;
```bash&#13;
yum makecache&#13;
```&#13;
&#13;
查看可用的yum源&#13;
&#13;
```bash&#13;
yum repolist&#13;
```&#13;
&#13;
列出可用组&#13;
&#13;
```bash&#13;
yum grouplist&#13;
```&#13;
&#13;
## rpm包管理器&#13;
&#13;
命令格式：&#13;
&#13;
```bash&#13;
rpm 参数 软件包&#13;
```&#13;
&#13;
参数：&#13;
&#13;
```text&#13;
安装：&#13;
-i 是install的意思，安装软件包&#13;
-v 显示附加信息，提供更多详细信息&#13;
-V 校验，对已安装的软件进行校验&#13;
-h --hash 安装时输出###标记&#13;
查询&#13;
-q 查询，一般跟下面的参数配合使用&#13;
-a 查询所有已安装的软件包&#13;
-f 系统文件名（查询系统文件属于哪个安装包）&#13;
-i 显示已安装的rpm软件包信息&#13;
-l 查询软件包文件的安装位置&#13;
-p 查询未安装软件包的相关信息&#13;
-R 查询软件包的依赖性&#13;
卸载&#13;
-e erase&#13;
--nodeps 忽略依赖&#13;
升级&#13;
-U 一般配合vh使用&#13;
```&#13;
&#13;
# MySQL&#13;
&#13;
## MySQL安装&#13;
&#13;
下载mysql数据包&#13;
&#13;
```bash&#13;
wget http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm&#13;
```&#13;
&#13;
安装mysql&#13;
&#13;
```bash&#13;
yum -y install mysql57-community-release-el7-10.noarch.rpm&#13;
```&#13;
&#13;
```bash&#13;
yum -y install mysql-community-server&#13;
```&#13;
&#13;
如果报错说公钥尚未安装则用如下命令，跳过公钥检查&#13;
&#13;
```bash&#13;
yum -y install mysql-community-server --nogpgcheck&#13;
```&#13;
&#13;
启动mysql服务&#13;
&#13;
```bash&#13;
systemctl start  mysqld&#13;
```&#13;
&#13;
查看初始密码&#13;
&#13;
```bash&#13;
grep 'password' /var/log/mysqld.log&#13;
```&#13;
&#13;
进入数据库&#13;
&#13;
```bash&#13;
mysql -h (主机ip，可省略) -u root -p &#13;
```&#13;
&#13;
修改root密码，xxxx就是新密码，大小写加符号&#13;
&#13;
```bash&#13;
ALTER USER USER() IDENTIFIED BY 'XXXX';&#13;
```&#13;
&#13;
退出&#13;
&#13;
```bash&#13;
exit&#13;
```&#13;
&#13;
## MySQL连接c++&#13;
&#13;
### Mysql++简介&#13;
&#13;
这里采用Mysql++这个库&#13;
&#13;
mysql连接c++主要的包有mysql-libs mysql-devel mysql++&#13;
&#13;
Mysql++是官方发布的、一个为MySQL设计的C++语言的API。</description><guid isPermaLink="true">https://wliafe.github.io/post/CentOS.html</guid><pubDate>Thu, 02 Jan 2025 15:19:25 +0000</pubDate></item><item><title>ArchLinux</title><link>https://wliafe.github.io/post/ArchLinux.html</link><description># 安装ArchLinux&#13;
&#13;
## 文章参考&#13;
&#13;
- [Arch Linux 安装使用教程 - ArchTutorial - Arch Linux Studio](https://archlinuxstudio.github.io/ArchLinuxTutorial/#/rookie/archlinux_pre_install)&#13;
&#13;
- [ArchWiki](https://wiki.archlinux.org/)&#13;
&#13;
## 前期准备&#13;
&#13;
- 虚拟机软件：VMware Workstation Lite15.5.5&#13;
&#13;
    虚拟机的配置：1个处理器+2核+2G内存+20G存储（不安装图形化界面系统部分只用不到5G，包括图形化界面10G左右，虚拟机配置可自由选择。</description><guid isPermaLink="true">https://wliafe.github.io/post/ArchLinux.html</guid><pubDate>Thu, 02 Jan 2025 15:18:50 +0000</pubDate></item><item><title>Linux C语言编程</title><link>https://wliafe.github.io/post/Linux%20C-yu-yan-bian-cheng.html</link><description># 通用IO模型&#13;
&#13;
## IO简介&#13;
&#13;
本章所关注的是磁盘文件的 I/O 操作。</description><guid isPermaLink="true">https://wliafe.github.io/post/Linux%20C-yu-yan-bian-cheng.html</guid><pubDate>Thu, 02 Jan 2025 15:17:49 +0000</pubDate></item><item><title>C语言程序</title><link>https://wliafe.github.io/post/C-yu-yan-cheng-xu.html</link><description># 文件输入输出程序&#13;
&#13;
创建文件并输入信息&#13;
&#13;
```c&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;stdlib.h&gt;&#13;
#include&lt;string.h&gt;&#13;
#define MAX 41&#13;
&#13;
int main(void)&#13;
{&#13;
	FILE *fp;&#13;
	char words[MAX];&#13;
	&#13;
	if((fp=fopen('wordy','a+'))==NULL)&#13;
	{&#13;
		fprintf(stdout,'Can't open \'wordy\' file.\n');&#13;
		exit(EXIT_FAILURE);&#13;
	}&#13;
	puts('Enter words to add to the file; press the #');&#13;
	puts('key at the beginning of a line to terminate.');&#13;
	while((fscanf(stdin,'%40s',words)==1)&amp;&amp;(words[0]!='#'))&#13;
		fprintf(fp,'%s\n',words);&#13;
	&#13;
	puts('File contents:');&#13;
	rewind(fp);&#13;
	while(fscanf(fp,'%s',words)==1)&#13;
		puts(words);&#13;
	puts('Done!');&#13;
	if(fclose(fp)!=0)&#13;
		fprintf(stderr,'Error closing file\n');&#13;
	&#13;
	return 0; &#13;
}&#13;
```&#13;
&#13;
# 走迷宫游戏&#13;
&#13;
```c&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;stdlib.h&gt;&#13;
#define CHANG 7&#13;
#define KUAN 6&#13;
void w();&#13;
void a();&#13;
void s();&#13;
void d();&#13;
char c[KUAN][CHANG]={   '######\n',&#13;
						'# 0#  \n',&#13;
						'# ## #\n',&#13;
						'#  # #\n',&#13;
						'##   #\n',&#13;
						'######\n'&#13;
						};&#13;
int main(void)&#13;
{&#13;
	int i;&#13;
	char ch;&#13;
	printf('%s',c[0]);&#13;
	ch=getch();&#13;
	while(ch!='q')&#13;
	{&#13;
		switch(ch)&#13;
		{&#13;
			case 'w': w();&#13;
					break;&#13;
			case 'a': a();&#13;
					break;&#13;
			case 's': s();&#13;
					break;&#13;
			case 'd': d();&#13;
					break;&#13;
			default:break;&#13;
		}&#13;
		if(c[1][5]=='0')&#13;
		{&#13;
			system('cls');&#13;
			printf('Congratulation');&#13;
			break;&#13;
		}&#13;
		system('cls');&#13;
		printf('%s',c[0]);&#13;
		ch=getch();&#13;
	}&#13;
	system('pause');&#13;
}&#13;
void w()&#13;
{&#13;
	int i,j,n=0;&#13;
	for(i=0;i&lt;KUAN;i++)&#13;
	{&#13;
		for(j=0;j&lt;CHANG;j++)&#13;
			if(c[i][j]=='0')&#13;
			{&#13;
				n++;&#13;
				break;&#13;
			}&#13;
		if(n==1)&#13;
			break;&#13;
	}&#13;
	if(c[i-1][j]!='#')&#13;
		{&#13;
			c[i-1][j]='0';&#13;
			c[i][j]=' ';&#13;
		}&#13;
}&#13;
void a()&#13;
{&#13;
	int i,j,n=0;&#13;
	for(i=0;i&lt;KUAN;i++)&#13;
	{&#13;
		for(j=0;j&lt;CHANG;j++)&#13;
			if(c[i][j]=='0')&#13;
			{&#13;
				n++;&#13;
				break;&#13;
			}&#13;
		if(n==1)&#13;
			break;&#13;
	}&#13;
	if(c[i][j-1]!='#')&#13;
		{&#13;
			c[i][j-1]='0';&#13;
			c[i][j]=' ';&#13;
		}&#13;
}&#13;
void s()&#13;
{&#13;
	int i,j,n=0;&#13;
	for(i=0;i&lt;KUAN;i++)&#13;
	{&#13;
		for(j=0;j&lt;CHANG;j++)&#13;
			if(c[i][j]=='0')&#13;
			{&#13;
				n++;&#13;
				break;&#13;
			}&#13;
		if(n==1)&#13;
			break;&#13;
	}&#13;
	if(c[i+1][j]!='#')&#13;
		{&#13;
			c[i+1][j]='0';&#13;
			c[i][j]=' ';&#13;
		}&#13;
}&#13;
void d()&#13;
{&#13;
	int i,j,n=0;&#13;
	for(i=0;i&lt;KUAN;i++)&#13;
	{&#13;
		for(j=0;j&lt;CHANG;j++)&#13;
			if(c[i][j]=='0')&#13;
			{&#13;
				n++;&#13;
				break;&#13;
			}&#13;
		if(n==1)&#13;
			break;&#13;
	}&#13;
	if(c[i][j+1]!='#')&#13;
		{&#13;
			c[i][j+1]='0';&#13;
			c[i][j]=' ';&#13;
		}&#13;
}&#13;
```&#13;
&#13;
# 学生管理系统1&#13;
&#13;
学生信息录入，打印，添加，删除，更改，查看。</description><guid isPermaLink="true">https://wliafe.github.io/post/C-yu-yan-cheng-xu.html</guid><pubDate>Thu, 02 Jan 2025 15:16:38 +0000</pubDate></item><item><title>C语言</title><link>https://wliafe.github.io/post/C-yu-yan.html</link><description># 函数&#13;
&#13;
## 创建并使用函数&#13;
&#13;
一个函数的例子&#13;
&#13;
```c&#13;
#include&lt;stdio.h&gt;&#13;
#define NAME 'GIGATHINK, INC.'&#13;
#define ADDRESS '101 Megabuck Plaza'&#13;
#define PLACE 'Megapolis, CA 94904'&#13;
#define WIDTH 40&#13;
&#13;
void starbar(void);//声明函数&#13;
					//这个函数的作用是打印（*）这个符号&#13;
int main(void)&#13;
{&#13;
	starbar();//调用函数&#13;
	printf('%s\n',NAME);&#13;
	printf('%s\n',ADDRESS);&#13;
	printf('%s\n',PLACE);&#13;
	starbar();//调用函数&#13;
	&#13;
	return 0;&#13;
}&#13;
&#13;
void starbar(void)&#13;
{&#13;
	int count;&#13;
	&#13;
	for(count=1;count&lt;=WIDTH;count++)&#13;
		putchar('*');&#13;
		putchar('\n');&#13;
}&#13;
```&#13;
&#13;
运行结果&#13;
&#13;
![1](https://github.com/user-attachments/assets/c1abd303-2bb9-4a4d-9c78-b75ffbd556d3)&#13;
&#13;
## 函数的结构&#13;
&#13;
实际参数  函数名（形式参数）&#13;
&#13;
void starbar(void)&#13;
&#13;
int main(void)也是一个函数，他是主函数。</description><guid isPermaLink="true">https://wliafe.github.io/post/C-yu-yan.html</guid><pubDate>Thu, 02 Jan 2025 15:16:03 +0000</pubDate></item><item><title>C++</title><link>https://wliafe.github.io/post/C%2B%2B.html</link><description># Hello world&#13;
&#13;
c++的第一个程序&#13;
&#13;
```cpp&#13;
#include&lt;iostream&gt;&#13;
using namespace std;&#13;
void main(void) {&#13;
	cout &lt;&lt; 'Hello world!';&#13;
}&#13;
```&#13;
&#13;
# 变量&#13;
&#13;
变量提供一个具名的、可供程序操作的存储空间。</description><guid isPermaLink="true">https://wliafe.github.io/post/C%2B%2B.html</guid><pubDate>Thu, 02 Jan 2025 15:14:57 +0000</pubDate></item><item><title>LeetCode算法题</title><link>https://wliafe.github.io/post/LeetCode-suan-fa-ti.html</link><description># 整数反转&#13;
&#13;
![1](https://github.com/user-attachments/assets/c7bc9880-721f-49f3-84f8-48aeff31906b)&#13;
&#13;
**我的思路**：将int数字转化为字符串，再将字符串逆序，最后将字符串转化为数字。</description><guid isPermaLink="true">https://wliafe.github.io/post/LeetCode-suan-fa-ti.html</guid><pubDate>Thu, 02 Jan 2025 15:11:07 +0000</pubDate></item><item><title>网协安全组二面试题</title><link>https://wliafe.github.io/post/wang-xie-an-quan-zu-er-mian-shi-ti.html</link><description># 算法题&#13;
&#13;
## 棋盘问题&#13;
&#13;
设有一个N×M方格的棋盘(1≤N≤100,1≤M≤100)&#13;
&#13;
求出该棋盘中包含有多少个正方形、多少个长方形（不包括正方形）。</description><guid isPermaLink="true">https://wliafe.github.io/post/wang-xie-an-quan-zu-er-mian-shi-ti.html</guid><pubDate>Thu, 02 Jan 2025 15:09:18 +0000</pubDate></item><item><title>数据结构实现</title><link>https://wliafe.github.io/post/shu-ju-jie-gou-shi-xian.html</link><description># 链表&#13;
&#13;
## C语言实现图书管理系统简化版&#13;
&#13;
==可保存的链表==&#13;
&#13;
==双向链表==&#13;
&#13;
图书管理系统（简化版）。</description><guid isPermaLink="true">https://wliafe.github.io/post/shu-ju-jie-gou-shi-xian.html</guid><pubDate>Thu, 02 Jan 2025 15:08:40 +0000</pubDate></item><item><title>其他算法题</title><link>https://wliafe.github.io/post/qi-ta-suan-fa-ti.html</link><description># 鞍点问题&#13;
&#13;
自定义函数找出二维矩阵的鞍点，如果没有鞍点打印相应信息。</description><guid isPermaLink="true">https://wliafe.github.io/post/qi-ta-suan-fa-ti.html</guid><pubDate>Thu, 02 Jan 2025 15:08:01 +0000</pubDate></item><item><title>洛谷算法题</title><link>https://wliafe.github.io/post/luo-gu-suan-fa-ti.html</link><description># P1003铺地毯&#13;
&#13;
![1](https://github.com/user-attachments/assets/09f6f32b-4e5d-48be-af50-0d2c3506a274)&#13;
&#13;
![2](https://github.com/user-attachments/assets/9f62058e-bd9e-4b12-b435-e3145675624a)&#13;
&#13;
![3](https://github.com/user-attachments/assets/6114a61f-a7aa-4cb4-85e6-d1dbdc2577fc)&#13;
&#13;
```c&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;string.h&gt;&#13;
#include&lt;stdlib.h&gt;&#13;
&#13;
int main(void)&#13;
{&#13;
	int n,i,j=0,x,y;&#13;
	struct{&#13;
		int a;&#13;
		int b;&#13;
		int g;&#13;
		int k;&#13;
	}dt[10001];&#13;
	scanf('%d',&amp;n);&#13;
	for(i=1;i&lt;=n;i++)&#13;
		scanf('%d %d %d %d',&amp;dt[i].a,&amp;dt[i].b,&amp;dt[i].g,&amp;dt[i].k);&#13;
	scanf('%d %d',&amp;x,&amp;y);&#13;
	for(i=n;i&gt;0;i--)&#13;
		if(x&gt;=dt[i].a&amp;&amp;x&lt;=dt[i].a+dt[i].g&amp;&amp;y&gt;=dt[i].b&amp;&amp;y&lt;=dt[i].b+dt[i].k)&#13;
		{&#13;
			j++;&#13;
			break;&#13;
		}&#13;
	if(j!=0)&#13;
		printf('%d',i);&#13;
	else&#13;
		printf('-1');&#13;
	&#13;
	return 0;&#13;
}&#13;
```&#13;
&#13;
# P2006赵神牛的游戏&#13;
&#13;
![4](https://github.com/user-attachments/assets/e5eb2c67-8346-4c01-83a8-465785cf0882)&#13;
&#13;
![5](https://github.com/user-attachments/assets/de61d81c-8f59-4252-9896-43ba17d58572)&#13;
&#13;
```c&#13;
#define _CRT_SECURE_NO_WARNINGS&#13;
//赵神牛的游戏&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;stdlib.h&gt;&#13;
int main(void) {&#13;
    int k, m, n;&#13;
    int i, t = 0;&#13;
    int a, b;&#13;
    scanf('%d%d%d', &amp;k, &amp;m, &amp;n);&#13;
    for (i = 0; i &lt; m; i++) {&#13;
        scanf('%d%d', &amp;a, &amp;b);&#13;
        if (a == 0 &amp;&amp; b &gt; 0) {&#13;
            printf('%d ', i + 1);&#13;
            t = 1;&#13;
        }&#13;
        else if (k / a * b &gt;= n) {&#13;
            printf('%d ', i + 1);&#13;
            t = 1;&#13;
        }&#13;
    }&#13;
    if (t == 0)printf('%d ', -1);&#13;
&#13;
    return 0;&#13;
}&#13;
```&#13;
&#13;
# P2084进制转换&#13;
&#13;
![6](https://github.com/user-attachments/assets/c12e669b-3e63-40e9-8ae8-8875c587b027)&#13;
&#13;
```c&#13;
#define _CRT_SECURE_NO_WARNINGS&#13;
//进制转换&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;stdlib.h&gt;&#13;
#include&lt;string.h&gt;&#13;
&#13;
int main(void) {&#13;
	int m,i,l,j,t;&#13;
	char n[1000];&#13;
	scanf('%d', &amp;m);&#13;
	scanf('%s', n);&#13;
	l = strlen(n);&#13;
	for (i = 0; i &lt; l; i++) {&#13;
		t = 0;&#13;
		if (n[i] != '0') {&#13;
			for (j = i + 1; j &lt; l; j++)&#13;
				if (n[j] != '0') { &#13;
					 printf('%c*%d^%d+', n[i], m, l - i - 1);&#13;
					 t = 1;&#13;
					 break;&#13;
				}&#13;
			if (t == 0)printf('%c*%d^%d', n[i], m, l - i - 1);&#13;
		}&#13;
	}&#13;
}&#13;
```。</description><guid isPermaLink="true">https://wliafe.github.io/post/luo-gu-suan-fa-ti.html</guid><pubDate>Thu, 02 Jan 2025 15:07:14 +0000</pubDate></item><item><title>Vite</title><link>https://wliafe.github.io/post/Vite.html</link><description># Vite 配置方法&#13;
&#13;
## base&#13;
&#13;
```js&#13;
export default defineConfig(({mode}) =&gt; {&#13;
    return {&#13;
        base: './',&#13;
        plugins: [vue()],&#13;
    }&#13;
})&#13;
```&#13;
&#13;
## alias&#13;
&#13;
```js&#13;
export default defineConfig(({mode}) =&gt; {&#13;
    return {&#13;
        plugins: [vue()],&#13;
        resolve: {&#13;
            alias: {&#13;
                '@': resolve(__dirname, 'src')&#13;
            }&#13;
        }&#13;
    }&#13;
})&#13;
```&#13;
&#13;
## 生产环境移除console&#13;
&#13;
```js&#13;
export default defineConfig(({mode}) =&gt; {&#13;
    return {&#13;
        plugins: [vue()],&#13;
        build: {&#13;
            minify: 'terser',&#13;
            terserOptions: {&#13;
                compress: {&#13;
                    // 生产环境移除console&#13;
                    drop_console: true,&#13;
                    drop_debugger: true&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
})&#13;
```&#13;
&#13;
## 配置proxy代理&#13;
&#13;
```js&#13;
export default defineConfig(({mode}) =&gt; {&#13;
    return {&#13;
        plugins: [vue()],&#13;
        server: {&#13;
            proxy: {&#13;
                '/api': {&#13;
                    target: loadEnv(mode, process.cwd()).VITE_BASE_API,&#13;
                    changeOrigin: true,&#13;
                    rewrite: (path) =&gt; path.replace(/^\/api/, ''),&#13;
                },&#13;
            }&#13;
        },&#13;
    }&#13;
})&#13;
&#13;
```&#13;
&#13;
## env环境变量配置&#13;
&#13;
创建 .env.development 和 .env.production 两个文件。</description><guid isPermaLink="true">https://wliafe.github.io/post/Vite.html</guid><pubDate>Thu, 02 Jan 2025 15:03:22 +0000</pubDate></item><item><title>TypeScript</title><link>https://wliafe.github.io/post/TypeScript.html</link><description># TypeScript引入js组件&#13;
&#13;
当使用ts时引入js组件时，可以同时引入@types/xxx达到使用ts的目的。</description><guid isPermaLink="true">https://wliafe.github.io/post/TypeScript.html</guid><pubDate>Thu, 02 Jan 2025 15:02:25 +0000</pubDate></item><item><title>前端Nodejs环境配置</title><link>https://wliafe.github.io/post/qian-duan-Nodejs-huan-jing-pei-zhi.html</link><description># Node.js安装&#13;
&#13;
从[官网下载node.js](https://nodejs.org/en)最好选LTS版本&#13;
&#13;
如果你需要运行vue2的项目，那你在安装过程中就要选择这个选项&#13;
&#13;
![node.js安装过程图](https://github.com/user-attachments/assets/ee364c83-1ce4-4471-a6db-615f49555baf)&#13;
&#13;
## 报错处理&#13;
&#13;
**错误信息**&#13;
&#13;
创建Vue项目报错python.EXE -c import sys； print “%s.%s.%s“ % sys.version_info[3]&#13;
&#13;
**解决方案**&#13;
&#13;
安装python2.7&#13;
&#13;
安装windows-build-tools&#13;
&#13;
在Windows PowerShell(管理员)中输入以下命令&#13;
&#13;
```bash&#13;
npm install --global --production windows-build-tools&#13;
```&#13;
&#13;
# WebStorm安装&#13;
&#13;
从[官网下载WebStorm](https://www.jetbrains.com.cn/webstorm/)，破解方法在我的文章**JetBrains软件破解**里。</description><guid isPermaLink="true">https://wliafe.github.io/post/qian-duan-Nodejs-huan-jing-pei-zhi.html</guid><pubDate>Thu, 02 Jan 2025 15:01:39 +0000</pubDate></item><item><title>前端highlightjs</title><link>https://wliafe.github.io/post/qian-duan-highlightjs.html</link><description># 使用highlight注意事项&#13;
&#13;
使用最新的marked时无法显示highlight高亮，需要搭配marked-highlight使用highlight&#13;
&#13;
这是[marked-highlight的GitHub链接](https://github.com/markedjs/marked-highlight)在README中有使用样例，可以复制使用。</description><guid isPermaLink="true">https://wliafe.github.io/post/qian-duan-highlightjs.html</guid><pubDate>Thu, 02 Jan 2025 15:00:03 +0000</pubDate></item><item><title>前端工具</title><link>https://wliafe.github.io/post/qian-duan-gong-ju.html</link><description># 前端工具文档&#13;
&#13;
[Vue官方文档](https://cn.vuejs.org/)，[Vite官方文档](https://cn.vitejs.dev/)&#13;
&#13;
[Vue Router官方文档](https://router.vuejs.org/zh/)，[Pinia官方文档](https://pinia.vuejs.org/zh/)&#13;
&#13;
[Element Plus官方文档](https://element-plus.gitee.io/zh-CN/)&#13;
&#13;
[Axios官方文档](https://www.axios-http.cn/)，[Fetch文档](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)&#13;
&#13;
[ECharts文档](https://echarts.apache.org/handbook/zh/get-started/)&#13;
&#13;
[marked.js文档](http://www.dagoogle.cn/n/745.html)，[highlight.js下载地址](https://highlightjs.org/)，[highlight.js预览效果](https://highlightjs.org/static/demo/)&#13;
&#13;
# 图标网站&#13;
&#13;
[阿里巴巴矢量图标](https://www.iconfont.cn/)，[标志客网址](https://www.logomaker.com.cn/)，[标小智网址](https://www.logosc.cn/logo/favicon)&#13;
&#13;
# Api接口网站&#13;
&#13;
[聚合数据网址](https://www.juhe.cn/)。</description><guid isPermaLink="true">https://wliafe.github.io/post/qian-duan-gong-ju.html</guid><pubDate>Thu, 02 Jan 2025 14:59:12 +0000</pubDate></item><item><title>8086汇编指令</title><link>https://wliafe.github.io/post/8086-hui-bian-zhi-ling.html</link><description># mov指令&#13;
&#13;
```asm&#13;
mov 寄存器，数据&#13;
mov 寄存器，寄存器&#13;
mov 寄存器，内存单元&#13;
mov 内存单元，寄存器&#13;
mov 段寄存器，寄存器&#13;
mov 寄存器，段寄存器&#13;
mov 内存单元，段寄存器&#13;
mov 段寄存器，内存单元&#13;
```&#13;
&#13;
# add指令（加法）&#13;
&#13;
```asm&#13;
add 寄存器，数据&#13;
add 寄存器，寄存器&#13;
add 寄存器，内存单元&#13;
add 内存单元，寄存器&#13;
```&#13;
&#13;
# sub指令（减法）&#13;
&#13;
```asm&#13;
sub 寄存器，数据&#13;
sub 寄存器，寄存器&#13;
sub 寄存器，内存单元&#13;
sub 内存单元，寄存器&#13;
```&#13;
&#13;
# mul乘法指令&#13;
&#13;
相乘的数为8位或16位&#13;
&#13;
如果是8位，就放在 al 和 8位reg或内存字节单元中，结果放在ax中&#13;
&#13;
如果是16位，就放在 ax 和 16位reg或内存字单元中，结果高位在dx中，低位在ax中。</description><guid isPermaLink="true">https://wliafe.github.io/post/8086-hui-bian-zhi-ling.html</guid><pubDate>Thu, 02 Jan 2025 14:54:20 +0000</pubDate></item><item><title>8086汇编寄存器</title><link>https://wliafe.github.io/post/8086-hui-bian-ji-cun-qi.html</link><description># 各个寄存器&#13;
&#13;
**cs:ip**:决定cpu读取命令物理地址。</description><guid isPermaLink="true">https://wliafe.github.io/post/8086-hui-bian-ji-cun-qi.html</guid><pubDate>Thu, 02 Jan 2025 14:51:31 +0000</pubDate></item><item><title>8086汇编基础知识</title><link>https://wliafe.github.io/post/8086-hui-bian-ji-chu-zhi-shi.html</link><description># 汇编语言的组成&#13;
&#13;
汇编语言有3类指令组成。</description><guid isPermaLink="true">https://wliafe.github.io/post/8086-hui-bian-ji-chu-zhi-shi.html</guid><pubDate>Thu, 02 Jan 2025 14:49:13 +0000</pubDate></item><item><title>8086汇编程序</title><link>https://wliafe.github.io/post/8086-hui-bian-cheng-xu.html</link><description># dosbox汇编命令&#13;
&#13;
 - R：查看、改变CPU寄存器的内容。</description><guid isPermaLink="true">https://wliafe.github.io/post/8086-hui-bian-cheng-xu.html</guid><pubDate>Thu, 02 Jan 2025 14:46:49 +0000</pubDate></item><item><title>PyTorch环境配置</title><link>https://wliafe.github.io/post/PyTorch-huan-jing-pei-zhi.html</link><description># Windows环境&#13;
&#13;
## 下载Miniconda&#13;
&#13;
从[Conda官网](https://docs.conda.io/en/latest/miniconda.html#windows-installers)下载合适的Miniconda环境，然后安装环境。</description><guid isPermaLink="true">https://wliafe.github.io/post/PyTorch-huan-jing-pei-zhi.html</guid><pubDate>Thu, 02 Jan 2025 12:33:04 +0000</pubDate></item><item><title>GPU环境配置</title><link>https://wliafe.github.io/post/GPU-huan-jing-pei-zhi.html</link><description># 确定CUDA和cudnn版本&#13;
&#13;
这里我是要用TensorFlow这个python库运行机器学习代码，因此要根据TensorFlow来配置CUDA和cudnn&#13;
&#13;
查看[TensorFlow官网](https://tensorflow.google.cn/install/source_windows?hl=zh-cn#gpu)，选择合适的版本方案&#13;
&#13;
![TensorFlow与CUDA版本对应图](https://github.com/user-attachments/assets/821b6a1c-09a0-4961-979d-f14ed2a0c162)&#13;
&#13;
# 安装CUDA&#13;
&#13;
打开NVDIA控制面板，点击左下角系统信息，然后点击组件&#13;
&#13;
![NVDIA控制面板](https://github.com/user-attachments/assets/3a2e2d90-991b-451f-839b-c4d68a648de2)&#13;
&#13;
这里的12.0是指cuda的最高版本，较低的版本也可以用，具体需要上网搜索和尝试。</description><guid isPermaLink="true">https://wliafe.github.io/post/GPU-huan-jing-pei-zhi.html</guid><pubDate>Thu, 02 Jan 2025 12:31:18 +0000</pubDate></item><item><title>机器学习PyTorch</title><link>https://wliafe.github.io/post/ji-qi-xue-xi-PyTorch.html</link><description># 简介&#13;
&#13;
开始学习机器学习了，关注哔哩哔哩的up主[跟李沐学AI](https://space.bilibili.com/1567748478)，学习 **【完结】动手学深度学习 PyTorch版** 合集视频。</description><guid isPermaLink="true">https://wliafe.github.io/post/ji-qi-xue-xi-PyTorch.html</guid><pubDate>Thu, 02 Jan 2025 12:28:44 +0000</pubDate></item><item><title>python生成word文档</title><link>https://wliafe.github.io/post/python-sheng-cheng-word-wen-dang.html</link><description># 简介&#13;
&#13;
这篇博客实现了根据模板文件自动生成word文档&#13;
&#13;
这里我采用的是python-docx工具来实现这个功能&#13;
&#13;
推荐书本：《快学Python：自动化办公轻松实战》&#13;
&#13;
# python-docx官方文档&#13;
&#13;
[python-docx](https://python-docx.readthedocs.io/)。</description><guid isPermaLink="true">https://wliafe.github.io/post/python-sheng-cheng-word-wen-dang.html</guid><pubDate>Thu, 02 Jan 2025 12:27:11 +0000</pubDate></item><item><title>python基础</title><link>https://wliafe.github.io/post/python-ji-chu.html</link><description># python的基本输入&#13;
&#13;
**输入字符串**&#13;
&#13;
```python&#13;
a=input()&#13;
```&#13;
&#13;
**输入数字**&#13;
&#13;
```python&#13;
a=eval(input())&#13;
```&#13;
&#13;
**输入多个数字，中间用（特殊符号）隔开。</description><guid isPermaLink="true">https://wliafe.github.io/post/python-ji-chu.html</guid><pubDate>Thu, 02 Jan 2025 12:21:15 +0000</pubDate></item><item><title>路由器刷Breed</title><link>https://wliafe.github.io/post/lu-you-qi-shua-Breed.html</link><description># Breed作者博客&#13;
&#13;
[Breed作者博客](https://blog.hackpascal.net/)&#13;
&#13;
# Breed版本设备表&#13;
&#13;
[Breed版本设备表](https://www.right.com.cn/forum/thread-161906-1-1.html)&#13;
&#13;
# Breed下载地址&#13;
&#13;
[Breed下载地址](https://breed.hackpascal.net/)。</description><guid isPermaLink="true">https://wliafe.github.io/post/lu-you-qi-shua-Breed.html</guid><pubDate>Thu, 02 Jan 2025 12:16:02 +0000</pubDate></item><item><title>Swagger-SpringDoc</title><link>https://wliafe.github.io/post/Swagger-SpringDoc.html</link><description># 简介&#13;
&#13;
SpringDoc是Swagger的优化版本，比较好用，这是[SpringDoc的官方文档](https://springdoc.org/)&#13;
&#13;
# 依赖&#13;
&#13;
```xml&#13;
&lt;!--swagger-ui--&gt;&#13;
&lt;dependency&gt;&#13;
    &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#13;
    &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;&#13;
    &lt;version&gt;1.5.12&lt;/version&gt;&#13;
&lt;/dependency&gt;&#13;
```&#13;
&#13;
# 配置类&#13;
&#13;
```java&#13;
import io.swagger.v3.oas.models.Components;&#13;
import io.swagger.v3.oas.models.OpenAPI;&#13;
import io.swagger.v3.oas.models.info.Contact;&#13;
import io.swagger.v3.oas.models.info.Info;&#13;
import io.swagger.v3.oas.models.info.License;&#13;
import io.swagger.v3.oas.models.security.SecurityRequirement;&#13;
import io.swagger.v3.oas.models.security.SecurityScheme;&#13;
import org.springdoc.core.GroupedOpenApi;&#13;
&#13;
import org.springframework.context.annotation.Bean;&#13;
import org.springframework.context.annotation.Configuration;&#13;
&#13;
&#13;
/**&#13;
 * springDoc-swagger标准配置&#13;
 *&#13;
 * @author huang cheng&#13;
 * 2021/8/13&#13;
 */&#13;
@Configuration&#13;
public class SpringDocSwaggerConfig {&#13;
&#13;
    private static final String basePackage = 'com.cheng.sunnyday.controller';//需要扫描api路径&#13;
    private static final String headerName = 'Authorization';//请求头名称&#13;
&#13;
    @Bean&#13;
    public GroupedOpenApi usersGroup() {&#13;
        return GroupedOpenApi.builder()&#13;
                .group('users')&#13;
                .addOperationCustomizer((operation, handlerMethod) -&gt; {&#13;
                    operation.addSecurityItem(new SecurityRequirement().addList(headerName));&#13;
                    return operation;&#13;
                })&#13;
                .packagesToScan(basePackage)&#13;
                .build();&#13;
    }&#13;
&#13;
    @Bean&#13;
    public OpenAPI customOpenAPI() {&#13;
        Components components = new Components();&#13;
        //添加右上角的统一安全认证&#13;
        components.addSecuritySchemes(headerName,&#13;
                new SecurityScheme()&#13;
                        .type(SecurityScheme.Type.APIKEY)&#13;
                        .scheme('basic')&#13;
                        .name(headerName)&#13;
                        .in(SecurityScheme.In.HEADER)&#13;
                        .description('请求头')&#13;
        );&#13;
&#13;
        return new OpenAPI()&#13;
                .components(components)&#13;
                .info(apiInfo());&#13;
    }&#13;
&#13;
    private Info apiInfo() {&#13;
        Contact contact = new Contact();&#13;
        contact.setEmail('1003816735@qq.com');&#13;
        contact.setName('cheng');&#13;
        contact.setUrl('https://blog.csdn.net/qq_42495847?spm=1000.2115.3001.5343');&#13;
        return new Info()&#13;
                .title('sunnyDay-swagger文档')&#13;
                .version('1.0')&#13;
                .contact(contact)&#13;
                .description('博客请关注：https://blog.csdn.net/qq_42495847?spm=1000.2115.3001.5343')&#13;
                .license(new License().name('Apache 2.0').url('http://springdoc.org'));&#13;
    }&#13;
&#13;
}&#13;
```&#13;
&#13;
ApiKey是对请求的header进行设置，第一、二个参数是header的key，第三个参数是用户输入&#13;
&#13;
# 常用注解&#13;
&#13;
|springdoc|注解位置|&#13;
|:--|:--:|&#13;
|@Tag(tags = “接口类描述”)|Controller类上|&#13;
|@Operation(summary =“接口方法描述”)|Controller方法上|&#13;
|@Parameters|Controller方法上|&#13;
|@Parameter(description=“参数描述”)|Controller方法上@Parameters里|&#13;
|@Parameter(description=“参数描述”)|Controller方法的参数上|&#13;
|@Parameter(hidden = true)或@Operation(hidden = true)或@Hidden|-|&#13;
|@Schema(description = “dto类描述”)|DTO类上|&#13;
|@Schema(description = “属性描述”)|DTO属性上|&#13;
&#13;
# 实体类&#13;
&#13;
```java&#13;
@Data&#13;
@Schema(description ='日记更新参数')&#13;
public class JournalUpdateDto {&#13;
&#13;
    @Schema(description ='日记id')&#13;
    @NotBlank(message = '日记id不能为空')&#13;
    private String id;&#13;
&#13;
    /**&#13;
     * 日记内容&#13;
     */&#13;
    @Schema(description ='日记内容')&#13;
    @NotBlank(message = '日记内容不能为空')&#13;
    private String content;&#13;
&#13;
    /**&#13;
     * 标签&#13;
     */&#13;
    @Schema(description ='标签')&#13;
    private String label;&#13;
&#13;
}&#13;
```&#13;
&#13;
# 统一返回类&#13;
&#13;
```java&#13;
/**&#13;
 * 通用返回类型&#13;
 */&#13;
@Data&#13;
@AllArgsConstructor&#13;
@NoArgsConstructor&#13;
public class CResponse&lt;T&gt; implements Serializable {&#13;
&#13;
    private static final long serialVersionUID = 1L;&#13;
    private String code;//状态码&#13;
    private String message;//文字描述&#13;
    private T data;//数据&#13;
&#13;
    public CResponse(String code, String message) {&#13;
        this(code,message,null);&#13;
    }&#13;
&#13;
}&#13;
```&#13;
&#13;
# 控制层&#13;
&#13;
```java&#13;
import com.cheng.sunnyday.common.constant.SecurityConstant;&#13;
import com.cheng.sunnyday.pojo.system.UserInfo;&#13;
import com.cheng.sunnyday.pojo.dto.LoginDto;&#13;
import com.cheng.sunnyday.pojo.dto.RegisterDto;&#13;
import com.cheng.sunnyday.common.http.CResponse;&#13;
import com.cheng.sunnyday.pojo.vo.TokenVo;&#13;
import com.cheng.sunnyday.service.LoginService;&#13;
import io.swagger.v3.oas.annotations.Operation;&#13;
import io.swagger.v3.oas.annotations.Parameter;&#13;
import io.swagger.v3.oas.annotations.tags.Tag;&#13;
import org.springframework.web.bind.annotation.*;&#13;
&#13;
import javax.annotation.Resource;&#13;
import javax.validation.Valid;&#13;
&#13;
/**&#13;
 * 用户登录控制&#13;
 *&#13;
 * @author huang cheng&#13;
 * 2021/8/11&#13;
 */&#13;
@Tag(name = '权限管理')&#13;
@RestController&#13;
@RequestMapping('/auth')&#13;
public class LoginController {&#13;
&#13;
    @Resource&#13;
    private LoginService loginService;&#13;
&#13;
    @Operation(summary = '注册')&#13;
    @PostMapping('/register')&#13;
    public CResponse&lt;TokenVo&gt; register(@RequestBody @Valid RegisterDto registerDto) {&#13;
        return loginService.register(registerDto);&#13;
    }&#13;
&#13;
    /**&#13;
     * 获取token 并更新/插入用户信息&#13;
     *&#13;
     * @param loginDto 传入该用户可获取到的用户信息&#13;
     * @return token 放到Header中的Authorization作为值&#13;
     */&#13;
    @Operation(summary = '得到token')&#13;
    @PostMapping('/getToken')&#13;
    public CResponse&lt;TokenVo&gt; getToken(@RequestBody @Valid LoginDto loginDto) {&#13;
        return loginService.getToken(loginDto);&#13;
    }&#13;
&#13;
    /**&#13;
     * 得到当前token中包含的用户信息&#13;
     *&#13;
     * @param token 令牌&#13;
     * @return 用户信息&#13;
     */&#13;
    @Operation(summary = '得到当前token中包含的用户信息')&#13;
    @PostMapping('/getUserInfo')&#13;
    public CResponse&lt;UserInfo&gt; getUserInfo(@Parameter(description = '请求头：Authorization') @RequestHeader(SecurityConstant.TOKEN_HEADER) String token) {&#13;
        return loginService.getUserInfo(token);&#13;
    }&#13;
&#13;
&#13;
}&#13;
```&#13;
&#13;
# 控制器放行地址&#13;
&#13;
如果有spring-Security或者拦截器过滤器之类的配置，需要对以下地址进行放行&#13;
&#13;
```java&#13;
    /**&#13;
     * 放行Swagger&#13;
     */&#13;
    public static final String[] SWAGGER_WHITELIST = {&#13;
            '/swagger-ui.html',&#13;
            '/swagger-ui/**',&#13;
            '/swagger-resources/**',&#13;
            '/v2/api-docs',&#13;
            '/v3/api-docs',&#13;
            '/v3/api-docs/swagger-config',&#13;
            '/webjars/**',&#13;
            '/doc.html',&#13;
    };&#13;
```&#13;
&#13;
# 常用配置&#13;
&#13;
SpringDoc还有一些常用的配置可以了解下，更多配置可以参考官方文档。</description><guid isPermaLink="true">https://wliafe.github.io/post/Swagger-SpringDoc.html</guid><pubDate>Thu, 02 Jan 2025 12:13:52 +0000</pubDate></item><item><title>SpringSecurity</title><link>https://wliafe.github.io/post/SpringSecurity.html</link><description>&#13;
# 简介&#13;
&#13;
SpringSecurity是Spring安全框架的一种，这里是[哔哩哔哩视频](https://www.bilibili.com/video/BV1mm4y1X7Hc/)，以下内容是对SpringSecurity补充。</description><guid isPermaLink="true">https://wliafe.github.io/post/SpringSecurity.html</guid><pubDate>Thu, 02 Jan 2025 12:11:17 +0000</pubDate></item><item><title>SpringBoot</title><link>https://wliafe.github.io/post/SpringBoot.html</link><description># 第一个项目&#13;
&#13;
## 项目创建&#13;
&#13;
![1](https://github.com/user-attachments/assets/bd9f75b4-d73c-44f5-832f-2b197741ff12)&#13;
&#13;
![2](https://github.com/user-attachments/assets/b5d17599-91c0-4c4e-8db6-5343fa03f0bc)&#13;
&#13;
![3](https://github.com/user-attachments/assets/8076e8f1-82b4-41f6-be92-bd61d7b143bf)&#13;
&#13;
## 文件编写&#13;
&#13;
application.yml&#13;
&#13;
```yml&#13;
spring:&#13;
  datasource:&#13;
    driver-class-name: com.mysql.cj.jdbc.Driver&#13;
    url: jdbc:mysql://192.168.1.120:3306/Users&#13;
    username: root&#13;
    password: Mysql.123&#13;
```&#13;
&#13;
User.java&#13;
&#13;
```java&#13;
public class User implements Serializable {&#13;
    private Integer id;&#13;
    private String name;&#13;
    private String password;&#13;
&#13;
    @Override&#13;
    public String toString() {&#13;
        return 'User{' +&#13;
                'id=' + id +&#13;
                ', name='' + name + '\'' +&#13;
                ', password='' + password + '\'' +&#13;
                '}';&#13;
    }&#13;
&#13;
    public Integer getId() {&#13;
        return id;&#13;
    }&#13;
&#13;
    public void setId(Integer id) {&#13;
        this.id = id;&#13;
    }&#13;
&#13;
    public String getName() {&#13;
        return name;&#13;
    }&#13;
&#13;
    public void setName(String name) {&#13;
        this.name = name;&#13;
    }&#13;
&#13;
    public String getPassword() {&#13;
        return password;&#13;
    }&#13;
&#13;
    public void setPassword(String password) {&#13;
        this.password = password;&#13;
    }&#13;
}&#13;
```&#13;
&#13;
UserMapper&#13;
&#13;
```java&#13;
@Mapper&#13;
public interface UserMapper {&#13;
    @Insert('insert into users(name,password) values(#{name},#{password})')&#13;
    void save(User user);&#13;
&#13;
    @Delete('delete from users where id = #{id}')&#13;
    void delete(Integer id);&#13;
&#13;
    @Update('update users set name= #{name},password= #{password} where id= #{id}')&#13;
    void update(User user);&#13;
&#13;
    @Select('select * from users')&#13;
    List&lt;User&gt; findAll();&#13;
&#13;
    @Select('select * from users where id = #{id}')&#13;
    User findById(Integer id);&#13;
}&#13;
&#13;
```&#13;
&#13;
UserService&#13;
&#13;
```java&#13;
public interface UserService {&#13;
    boolean save(User user);&#13;
&#13;
    boolean update(User user);&#13;
&#13;
    boolean delete(Integer id);&#13;
&#13;
    User findById(Integer id);&#13;
&#13;
    List&lt;User&gt; findAll();&#13;
}&#13;
```&#13;
&#13;
UserServiceImpl&#13;
&#13;
```java&#13;
@Service&#13;
public class UserServiceImpl implements UserService {&#13;
    @Autowired&#13;
    private UserMapper userDao;&#13;
&#13;
    public boolean save(User user) {&#13;
        userDao.save(user);&#13;
        return true;&#13;
    }&#13;
&#13;
    public boolean update(User user) {&#13;
        userDao.update(user);&#13;
        return true;&#13;
    }&#13;
&#13;
    public boolean delete(Integer id) {&#13;
        userDao.delete(id);&#13;
        return true;&#13;
    }&#13;
&#13;
    public User findById(Integer id) {&#13;
        return userDao.findById(id);&#13;
    }&#13;
&#13;
    public List&lt;User&gt; findAll() {&#13;
        return userDao.findAll();&#13;
    }&#13;
}&#13;
```&#13;
&#13;
UserController&#13;
&#13;
```java&#13;
@RestController&#13;
@RequestMapping('/users')&#13;
public class UserController {&#13;
&#13;
    @Autowired&#13;
    UserService userService;&#13;
&#13;
    @PostMapping&#13;
    public boolean save(@RequestBody User user) {&#13;
        userService.save(user);&#13;
        return true;&#13;
    }&#13;
&#13;
    @PutMapping&#13;
    public boolean update(@RequestBody User user) {&#13;
        userService.update(user);&#13;
        return true;&#13;
    }&#13;
&#13;
    @DeleteMapping('/{id}')&#13;
    public boolean delete(@PathVariable Integer id) {&#13;
        userService.delete(id);&#13;
        return true;&#13;
    }&#13;
&#13;
    @GetMapping('/{id}')&#13;
    public User findById(@PathVariable Integer id) {&#13;
        return userService.findById(id);&#13;
    }&#13;
&#13;
    @GetMapping&#13;
    public List&lt;User&gt; findAll() {&#13;
        return userService.findAll();&#13;
    }&#13;
}&#13;
```&#13;
&#13;
## 运行&#13;
&#13;
![4](https://github.com/user-attachments/assets/cec1368d-e978-4665-9a35-58743224fe5e)&#13;
&#13;
![5](https://github.com/user-attachments/assets/a2d437d2-3cec-44fd-9584-94e792bac260)&#13;
&#13;
# 多环境配置&#13;
&#13;
&gt;开发SpringBoot应用的时候，通常程序需要在测试环境测试成功后才会上线到生产环境。</description><guid isPermaLink="true">https://wliafe.github.io/post/SpringBoot.html</guid><pubDate>Thu, 02 Jan 2025 12:01:01 +0000</pubDate></item><item><title>Spring</title><link>https://wliafe.github.io/post/Spring.html</link><description># 基本概念 &#13;
&#13;
## IoC(Inversion of Control)控制反转&#13;
&#13;
定义：使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转&#13;
&#13;
## IoC容器&#13;
 &#13;
定义：spring中使用IoC容器实现IoC&#13;
&#13;
IoC容器负责对象的创建、初始化等一系列工作。</description><guid isPermaLink="true">https://wliafe.github.io/post/Spring.html</guid><pubDate>Thu, 02 Jan 2025 11:58:25 +0000</pubDate></item><item><title>MySQL</title><link>https://wliafe.github.io/post/MySQL.html</link><description># 常用数据库命令&#13;
&#13;
```sql&#13;
-- 展示所有数据库&#13;
show databases;&#13;
-- 使用数据库&#13;
use 数据库名称;&#13;
-- 展示当前数据库所有表&#13;
shwo tables;&#13;
-- 展示表结构&#13;
desc 表名称;&#13;
```&#13;
&#13;
# MySQL数据库导入导出&#13;
&#13;
## MySQL数据库导出数据和表结构&#13;
&#13;
```bash&#13;
mysqldump -u 用户名 -p 密码 数据库名 &gt; 数据库名.sql&#13;
```&#13;
&#13;
## MySQL数据库导出表结构&#13;
&#13;
```bash&#13;
mysqldump -u 用户名 -p 密码 -d 数据库名 &gt; 数据库名.sql&#13;
```&#13;
&#13;
## MySQL数据库导入.sql文件&#13;
&#13;
```bash&#13;
mysql -u 用户名 -p 密码 数据库名 &lt; 数据库名.sql&#13;
```&#13;
&#13;
**数据库中命令方式导入**&#13;
&#13;
```sql&#13;
-- 选择数据库&#13;
use 数据库名称;&#13;
-- 导入数据（注意sql文件的路径）&#13;
source sql文件路径;&#13;
```。</description><guid isPermaLink="true">https://wliafe.github.io/post/MySQL.html</guid><pubDate>Thu, 02 Jan 2025 11:57:50 +0000</pubDate></item><item><title>MyBatis-Plas</title><link>https://wliafe.github.io/post/MyBatis-Plas.html</link><description># 简介&#13;
&#13;
MyBatis-Plas是Java后端开发对数据库进行操作的工具，这里是[MyBatis-Plas的官方文档](https://baomidou.com/)，同时这里还有[哔哩哔哩的视频](https://www.bilibili.com/video/BV1Bq4y1f7YD/)可以学习。</description><guid isPermaLink="true">https://wliafe.github.io/post/MyBatis-Plas.html</guid><pubDate>Thu, 02 Jan 2025 11:57:09 +0000</pubDate></item><item><title>Maven</title><link>https://wliafe.github.io/post/Maven.html</link><description># 简介&#13;
&#13;
Java的包管理工具就是Maven，这是[Maven的官方网站](https://mvnrepository.com/)所有的Maven包都可以查到。</description><guid isPermaLink="true">https://wliafe.github.io/post/Maven.html</guid><pubDate>Thu, 02 Jan 2025 11:56:31 +0000</pubDate></item><item><title>正则表达式</title><link>https://wliafe.github.io/post/zheng-ze-biao-da-shi.html</link><description># (.*?)知识点&#13;
&#13;
利用这个符号可以在文字中添加变量，这个可以读取变量。</description><guid isPermaLink="true">https://wliafe.github.io/post/zheng-ze-biao-da-shi.html</guid><pubDate>Thu, 02 Jan 2025 11:55:53 +0000</pubDate></item><item><title>异常处理</title><link>https://wliafe.github.io/post/yi-chang-chu-li.html</link><description># 什么是全局异常处理器&#13;
&#13;
软件开发springboot项目过程中，不可避免的需要处理各种异常，spring mvc架构中各层会出现大量的try{...} catch{...} finally{...}代码块，不仅有大量的冗余代码，而且还影响代码的可读性。</description><guid isPermaLink="true">https://wliafe.github.io/post/yi-chang-chu-li.html</guid><pubDate>Thu, 02 Jan 2025 11:55:11 +0000</pubDate></item><item><title>后端环境配置</title><link>https://wliafe.github.io/post/hou-duan-huan-jing-pei-zhi.html</link><description># 简介&#13;
&#13;
后端环境包括Mysql数据库、redis和java。</description><guid isPermaLink="true">https://wliafe.github.io/post/hou-duan-huan-jing-pei-zhi.html</guid><pubDate>Thu, 02 Jan 2025 11:54:27 +0000</pubDate></item><item><title>Visual Studio Code</title><link>https://wliafe.github.io/post/Visual%20Studio%20Code.html</link><description># VScode 配置&#13;
&#13;
## B站视频&#13;
&#13;
[从零开始手把手教你配置属于你的VS Code](https://www.bilibili.com/video/BV1TT4y1g7aF?spm_id_from=333.999.0.0&amp;vd_source=c7f0a8a1b453261561b18cd69cebd8b3)&#13;
&#13;
## 资源&#13;
&#13;
**mingw64：**[百度网盘链接](https://pan.baidu.com/s/1L8OdqC-4VIfRvU0_cWa4jw?pwd=4i7v)&#13;
&#13;
**VS Code下载地址：**[VS Code官网](https://code.visualstudio.com/)&#13;
&#13;
## mingw64&#13;
&#13;
将资源中的mingw64下载后放到合适的位置，然后将文件路径加入到环境变量中&#13;
&#13;
![环境变量图片](https://github.com/user-attachments/assets/3f23d11a-2dff-4686-b1ff-035da3b6f32f)&#13;
&#13;
## VScode扩展下载&#13;
&#13;
C/C++：运行C和C++的软件&#13;
&#13;
![C/C++扩展图](https://github.com/user-attachments/assets/442f5666-d53a-47a3-8eb9-d1510ee16954)&#13;
&#13;
Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code：汉化软件&#13;
&#13;
![Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code扩展图](https://github.com/user-attachments/assets/6e389ffc-b040-413e-a39c-318b2b059acf)&#13;
&#13;
Code Runner：代码运行软件&#13;
&#13;
![Code Runner扩展图](https://github.com/user-attachments/assets/eb57ec5a-04a2-4eb9-bf18-82db9f51ebc7)&#13;
&#13;
Git Graph：git版本控制查看软件&#13;
&#13;
![Git Graph扩展图](https://github.com/user-attachments/assets/6de51f61-bc8e-403c-91ce-38e70c2d5b5c)&#13;
&#13;
## Code Runner 配置&#13;
&#13;
打开扩展设置&#13;
&#13;
![5](https://github.com/user-attachments/assets/1e12a7e3-1338-499c-82c2-6fb2789983bd)&#13;
&#13;
## C/C++ 配置&#13;
&#13;
![6](https://github.com/user-attachments/assets/36ee4d88-7291-4a9d-97ac-9a926a38e367)&#13;
&#13;
![7](https://github.com/user-attachments/assets/1623b70b-c47f-4f20-afce-b1bee020a90f)&#13;
&#13;
![8](https://github.com/user-attachments/assets/8c0620e5-7717-46ab-8a82-46cbabf79b96)&#13;
&#13;
![9](https://github.com/user-attachments/assets/bde10f96-b4a0-486c-a28d-16c10b8880fa)&#13;
&#13;
![10](https://github.com/user-attachments/assets/efd71fc0-dddc-407e-bc95-1f1b091aadb3)&#13;
&#13;
![11](https://github.com/user-attachments/assets/c8032e09-4c38-4be5-b35f-46cbb1a77be2)&#13;
&#13;
# VScode 代码片段&#13;
&#13;
用好了就是非常好用的快捷键&#13;
&#13;
```json&#13;
'Print to console': {&#13;
    'prefix': 'log',&#13;
 	  'body': [&#13;
 		  'console.log('$1');',&#13;
 		  '$2'&#13;
 	  ],&#13;
 	  'description': 'Log output to console'&#13;
 }&#13;
```。</description><guid isPermaLink="true">https://wliafe.github.io/post/Visual%20Studio%20Code.html</guid><pubDate>Thu, 02 Jan 2025 11:51:33 +0000</pubDate></item><item><title>Visual Studio</title><link>https://wliafe.github.io/post/Visual%20Studio.html</link><description># Visual Studio使用scanf和printf函数出现报错的解决方法&#13;
&#13;
在文件头部加入下面这段代码	&#13;
&#13;
```cpp&#13;
#define _CRT_SECURE_NO_WARNINGS&#13;
```&#13;
&#13;
# 创建新文件时自动生成#define _CRT_SECURE_NO_WARNINGS的方法&#13;
&#13;
在newc++file文件中加入下面这段代码&#13;
&#13;
```cpp&#13;
#define _CRT_SECURE_NO_WARNINGS&#13;
```&#13;
&#13;
newc++file文件位置在Microsoft Visual Studio\Common7\IDE\VC\vcprojectitems\newc++file。</description><guid isPermaLink="true">https://wliafe.github.io/post/Visual%20Studio.html</guid><pubDate>Thu, 02 Jan 2025 11:47:30 +0000</pubDate></item><item><title>StarUML</title><link>https://wliafe.github.io/post/StarUML.html</link><description># StarUML导出图片去除水印&#13;
&#13;
## 简介&#13;
&#13;
StarUML版本为4.0&#13;
&#13;
## 资源&#13;
&#13;
资源为已经修改好的app.asar文件，可直接对原来文件进行替换。</description><guid isPermaLink="true">https://wliafe.github.io/post/StarUML.html</guid><pubDate>Thu, 02 Jan 2025 11:46:46 +0000</pubDate></item><item><title>shell</title><link>https://wliafe.github.io/post/shell.html</link><description># 概论&#13;
&#13;
shell是我们通过命令行与操作系统沟通的语言。</description><guid isPermaLink="true">https://wliafe.github.io/post/shell.html</guid><pubDate>Thu, 02 Jan 2025 11:44:52 +0000</pubDate></item><item><title>Ollama</title><link>https://wliafe.github.io/post/Ollama.html</link><description># Ollama使用命令&#13;
&#13;
```bash&#13;
# 显示模型列表。</description><guid isPermaLink="true">https://wliafe.github.io/post/Ollama.html</guid><pubDate>Thu, 02 Jan 2025 11:44:19 +0000</pubDate></item><item><title>Markdown</title><link>https://wliafe.github.io/post/Markdown.html</link><description># Markdown编写数学公式&#13;
&#13;
## 简介&#13;
&#13;
在 Markdown 中，您可以使用 LaTeX 语法编辑数学公式。</description><guid isPermaLink="true">https://wliafe.github.io/post/Markdown.html</guid><pubDate>Thu, 02 Jan 2025 11:43:38 +0000</pubDate></item><item><title>LaTeX</title><link>https://wliafe.github.io/post/LaTeX.html</link><description># Tex Live下载与安装&#13;
&#13;
[清华镜像CTAN文档](https://mirrors.tuna.tsinghua.edu.cn/help/CTAN/)&#13;
&#13;
## 下载&#13;
&#13;
[官网下载](https://www.tug.org/texlive/acquire-netinstall.html)&#13;
&#13;
[清华镜像](https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/)&#13;
&#13;
官网速度特别慢，建议使用清华镜像。</description><guid isPermaLink="true">https://wliafe.github.io/post/LaTeX.html</guid><pubDate>Thu, 02 Jan 2025 11:41:45 +0000</pubDate></item><item><title>JetBrains软件破解</title><link>https://wliafe.github.io/post/JetBrains-ruan-jian-po-jie.html</link><description># JetBrains软件破解&#13;
&#13;
JetBrains的软件非常好用，我比较喜欢，但JetBrains的收费让人头疼，下面介绍JetBrains软件的破解方法。</description><guid isPermaLink="true">https://wliafe.github.io/post/JetBrains-ruan-jian-po-jie.html</guid><pubDate>Thu, 02 Jan 2025 11:40:49 +0000</pubDate></item><item><title>git</title><link>https://wliafe.github.io/post/git.html</link><description># 安装git&#13;
&#13;
[git下载地址](https://git-scm.com/downloads)&#13;
&#13;
点开后如下图：&#13;
&#13;
![1](https://github.com/user-attachments/assets/b76c59c6-50b4-487b-a5bb-46eda521d1ae)&#13;
&#13;
设置跟随下图&#13;
&#13;
![2](https://github.com/user-attachments/assets/67b7e6be-518d-4dca-97ea-2f2d640c7eb8)&#13;
&#13;
![3](https://github.com/user-attachments/assets/ec490a34-3d05-44bf-b7bb-03faa7d31493)&#13;
&#13;
![4](https://github.com/user-attachments/assets/48a18760-cc40-4a62-bd48-4d9c1f8fb685)&#13;
&#13;
![5](https://github.com/user-attachments/assets/f0ffb941-7661-4714-af74-88cb27bfd9a6)&#13;
&#13;
![6](https://github.com/user-attachments/assets/55fab334-43e8-4cfb-b493-437f2d806418)&#13;
&#13;
![7](https://github.com/user-attachments/assets/f8ee6492-3499-4526-b2dc-aa13ee98868b)&#13;
&#13;
![8](https://github.com/user-attachments/assets/1af2835b-e0c0-4aee-8bc9-cb3eca1ae410)&#13;
&#13;
![9](https://github.com/user-attachments/assets/fb6903ba-3929-4c55-a7e5-30e58b89be40)&#13;
&#13;
# 配置git&#13;
&#13;
单机右键，打开Git Bush Here然后通过输入命令设置用户名。</description><guid isPermaLink="true">https://wliafe.github.io/post/git.html</guid><pubDate>Thu, 02 Jan 2025 11:38:33 +0000</pubDate></item><item><title>docker</title><link>https://wliafe.github.io/post/docker.html</link><description># docker本地和容器之间的文件传输&#13;
&#13;
## 获取容器id全称&#13;
&#13;
```bash&#13;
docker inspect -f '{{.id}}' 容器名称&#13;
```&#13;
&#13;
## 本地文件传输到容器&#13;
&#13;
```bash&#13;
docker cp 本地文件路径 ID全称:容器路径&#13;
```&#13;
&#13;
## 容器文件传输到本地&#13;
&#13;
```bash&#13;
docker cp ID全称:容器路径 本地文件路径&#13;
```&#13;
&#13;
# docker容器创建&#13;
&#13;
## docker容器随docker启动而启动&#13;
&#13;
```bash&#13;
docker  --restart=always&#13;
```&#13;
&#13;
# Redis容器创建(最简单)&#13;
&#13;
```bash&#13;
docker run --name env-redis -d -p 6379:6379 redis --requirepass Redis.123&#13;
```&#13;
&#13;
# Mysql容器创建(最简单)&#13;
&#13;
```bash&#13;
docker run --name env-mysql -e MYSQL_ROOT_PASSWORD=Mysql.123 -d -p 3306:3306 mysql&#13;
```&#13;
&#13;
# Nginx容器创建&#13;
&#13;
```bash&#13;
docker run --name env-nginx -d -p 8080:80 nginx:stable-perl&#13;
```&#13;
&#13;
# LobeChat容器创建（内部包含Ollama）&#13;
&#13;
```bash&#13;
docker run --name env-lobechat -e OLLAMA_PROXY_URL=http://host.docker.internal:11434/v1 -d -p 3210:3210 lobehub/lobe-chat&#13;
```&#13;
&#13;
# dify容器创建&#13;
&#13;
```bash&#13;
git clone https://github.com/langgenius/dify.git&#13;
cd dify/docker&#13;
docker compose up -d&#13;
```。</description><guid isPermaLink="true">https://wliafe.github.io/post/docker.html</guid><pubDate>Thu, 02 Jan 2025 11:34:59 +0000</pubDate></item><item><title>Cmake</title><link>https://wliafe.github.io/post/Cmake.html</link><description># cmake的简单使用&#13;
&#13;
cmake的最简单粗暴的使用方法，仅限于Windows。</description><guid isPermaLink="true">https://wliafe.github.io/post/Cmake.html</guid><pubDate>Thu, 02 Jan 2025 11:34:13 +0000</pubDate></item><item><title>小米手机安装谷歌框架</title><link>https://wliafe.github.io/post/xiao-mi-shou-ji-an-zhuang-gu-ge-kuang-jia.html</link><description># 下载谷歌安装器Go&#13;
&#13;
从豌豆荚下载Go谷歌安装器，通过Go谷歌安装器安装谷歌三件套。</description><guid isPermaLink="true">https://wliafe.github.io/post/xiao-mi-shou-ji-an-zhuang-gu-ge-kuang-jia.html</guid><pubDate>Thu, 02 Jan 2025 11:33:25 +0000</pubDate></item><item><title>上网</title><link>https://wliafe.github.io/post/shang-wang.html</link><description># 工具&#13;
&#13;
## 简介&#13;
&#13;
下面这些都是科学上网的工具，其中电脑版我最推荐使用的是v2rayN，而手机版我最推荐使用v2rayNG。</description><guid isPermaLink="true">https://wliafe.github.io/post/shang-wang.html</guid><pubDate>Thu, 02 Jan 2025 11:32:30 +0000</pubDate></item><item><title>第二届西安邮电大学网络安全大赛(部分re)</title><link>https://wliafe.github.io/post/di-er-jie-xi-an-you-dian-da-xue-wang-luo-an-quan-da-sai-%28-bu-fen-re%29.html</link><description># ez_MATH&#13;
&#13;
下载文件后打开：&#13;
&#13;
```cpp&#13;
#include&lt;stdio.h&gt;&#13;
#include&lt;string.h&gt;&#13;
int main()&#13;
{&#13;
	//welcome to XUPT_CTF!&#13;
	//在CTF逆向中，首先需要建立起逆向思维，希望本次CTF校赛能够给你带来一些收获！&#13;
	char flag[] = 'xxx';&#13;
	for (int i = 0; i &lt; strlen(flag); i++)&#13;
	{&#13;
		//printf('%c', flag[i]);&#13;
		flag[i] -= 5;&#13;
		flag[i] += 2;&#13;
		flag[i] -= 1;&#13;
		flag[i] ^= 5;&#13;
		flag[i] += 2;&#13;
		flag[i] = (flag[i] + 1);&#13;
		printf('%d,', flag[i]);&#13;
	}&#13;
}&#13;
//encodeflag = {106, 112, 91, 105, 117, 79, 91, 120, 100, 97, 67, 109, 97, 71, 71, 71, 91, 109, 115, 127}&#13;
```&#13;
&#13;
提示加密后的flag为：&#13;
&#13;
```cpp&#13;
encodeflag = {106, 112, 91, 105, 117, 79, 91, 120, 100, 97, 67, 109, 97, 71, 71, 71, 91, 109, 115, 127}&#13;
```&#13;
&#13;
经过逆推后的代码是：&#13;
&#13;
```cpp&#13;
int s[] = {106, 112, 91, 105, 117, 79, 91, 120, 100, 97, 67, 109, 97, 71, 71, 71, 91, 109, 115, 127};&#13;
int main(void){&#13;
	for (int i = 0; i &lt; 20; i++)&#13;
	{&#13;
		s[i]--;&#13;
		s[i]-=2;&#13;
		s[i]^=5;&#13;
		s[i]+=1;&#13;
		s[i]-=2;&#13;
		s[i]+=5;&#13;
		printf('%c',s[i]);&#13;
	}&#13;
} &#13;
```&#13;
&#13;
# eazy_encode&#13;
&#13;
下载后打开程序：&#13;
&#13;
![1](https://github.com/user-attachments/assets/3a69e7ed-5137-4ec4-9b1d-f3815ed8dcc8)&#13;
&#13;
![2](https://github.com/user-attachments/assets/8d5a3f30-c842-479b-9ad3-8c8490b085ba)&#13;
&#13;
发现缺少两个dll文件,没关系，网上搜索直接下载，放入与exe文件同一个文件夹中。</description><guid isPermaLink="true">https://wliafe.github.io/post/di-er-jie-xi-an-you-dian-da-xue-wang-luo-an-quan-da-sai-%28-bu-fen-re%29.html</guid><pubDate>Thu, 02 Jan 2025 11:28:01 +0000</pubDate></item><item><title>安全网站</title><link>https://wliafe.github.io/post/an-quan-wang-zhan.html</link><description># 安全网站&#13;
&#13;
[攻防世界](https://adworld.xctf.org.cn/)，[BUUCTF](https://buuoj.cn/)&#13;
&#13;
[看雪](https://bbs.kanxue.com/)，[安全客](https://www.anquanke.com/)，[i春秋](https://www.ichunqiu.com/)，[吾爱破解](https://www.52pojie.cn/)&#13;
&#13;
[全国大学生安全竞赛](http://www.ciscn.cn/)&#13;
&#13;
# 安全工具&#13;
&#13;
[JSON在线](https://www.sojson.com/)，[在线工具](https://tool.lu/)，[CTF在线工具](http://www.hiencode.com/)&#13;
&#13;
[CMD5](https://www.cmd5.com/)，[MD5](https://www.somd5.com/)，[查看字符编码(UTF-8)](http://www.mytju.com/classcode/tools/encode_utf8.asp)&#13;
&#13;
[VIRUSTOTAL(病毒检测工具)](https://www.virustotal.com/)&#13;
&#13;
[Cheat Engine](https://cheatengine.org/)&#13;
&#13;
# 安全文档&#13;
&#13;
[CTF Wiki](https://ctf-wiki.org/)，[Windows API 参考手册](http://www.office-cn.net/t/api/api_content.htm)。</description><guid isPermaLink="true">https://wliafe.github.io/post/an-quan-wang-zhan.html</guid><pubDate>Thu, 02 Jan 2025 11:21:59 +0000</pubDate></item><item><title>链接</title><link>https://wliafe.github.io/link.html</link><description>### 我的友链&#13;
&#13;
- [Phantomor](https://phantomor.github.io/)&#13;
&#13;
### 我的项目&#13;
&#13;
- [TFRS](https://github.com/wliafe/TFRS) 我的毕业设计，基于深度学习的印刷字体识别系统设计与实现。</description><guid isPermaLink="true">https://wliafe.github.io/link.html</guid><pubDate>Thu, 02 Jan 2025 13:43:02 +0000</pubDate></item><item><title>常用链接</title><link>https://wliafe.github.io/about.html</link><description>**AI：**&#13;
&#13;
- [ChatGPT](https://chat.openai.com/)，[文心一言](https://yiyan.baidu.com/)，[聚联AI](https://chat.julianwl.com/)，[Kimi.ai - 帮你看更大的世界](https://kimi.moonshot.cn/)，[MindShow(PPT自动生成工具)](https://mindshow.fun/)&#13;
&#13;
**机器学习：**&#13;
&#13;
- [PyTorch](https://pytorch.org/)&#13;
&#13;
**前端：**&#13;
&#13;
- [Vue](https://cn.vuejs.org/)，[Vite](https://cn.vitejs.dev/)，[Vue Router](https://router.vuejs.org/zh/)，[Pinia](https://pinia.vuejs.org/zh/)，[Element Plus](https://element-plus.gitee.io/zh-CN/)，[Axios](https://www.axios-http.cn/)，[Fetch](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch)&#13;
- [ECharts](https://echarts.apache.org/)，[marked.js](http://www.dagoogle.cn/n/745.html)，[highlight.js下载地址](https://highlightjs.org/)，[highlight.js预览效果](https://highlightjs.org/static/demo/)&#13;
- [iconfont](https://www.iconfont.cn/)，[标志客](https://www.logomaker.com.cn/)，[标小智](https://www.logosc.cn/logo/favicon)，[聚合数据](https://www.juhe.cn/)&#13;
&#13;
**工具：**&#13;
&#13;
- [查询网](https://www.ip138.com/)，[Desmos图形计算器](https://www.desmos.com/)，[Convertio文件转换器](https://convertio.co/zh/)，[依奇在线超级转换工具](https://www.wdku.net/)，[B站视频下载工具](https://zhouql.vip/bilibili/)&#13;
&#13;
**资源：**&#13;
&#13;
- [Github](https://github.com/)，[Gitee](https://gitee.com/)，[阿里云盘](https://www.aliyundrive.com/)，[夸克网盘](https://pan.quark.cn/)，[巴法云](https://cloud.bemfa.com/)&#13;
- [CSDN](https://www.csdn.net/)，[稀土掘金](https://juejin.cn/)，[知乎](https://www.zhihu.com/)，[博客园](https://www.cnblogs.com/)，[菜鸟教程](https://www.runoob.com/)，[中文开源技术交流社区](https://www.oschina.net/)，[51CTO博客](https://blog.51cto.com/)，[阿里云盘吧](https://www.alipanba.com/)&#13;
- [91美剧网](https://91mjw.tv/)，[低端影视](https://ddys.site/)，[恩山无线论坛](https://www.right.com.cn/)，[知网](https://b.wenxian.shop/)，[资源猫](https://www.ziyuanm.com/)，[大数据导航](https://hao.199it.com/)，[虫部落](https://search.chongbuluo.com/)，[猎手导航搜索](http://www.lsdhss.com/)&#13;
- [电脑店](https://u.diannaodian.com/)，[脚本之家](https://www.bookstack.cn/)，[绿色资源网](http://www.downcc.com/)，[IT天空](https://www.itsk.com/)，[DLL下载站](http://www.dllxz.com/)，[Windows系统dll文件下载与修复](https://www.wenjian.net/)，[MSDN](https://msdn.itellyou.cn/)，[Linux镜像](https://mirrors.ustc.edu.cn/help/index.html)&#13;
- [IT码农](https://tanqingbo.cn/)，[博文视点](http://www.broadview.com.cn/)，[书栈网](https://www.bookstack.cn/)，[java知识分享网](http://www.java1234.com/)，[码农之家](https://www.xz577.com/)，[鸠摩搜索](https://www.jiumodiary.com/)，[hello girl](https://www.jqhtml.com/down/category/resources)，[Jikbook](https://jikbook.com/)，[搬书匠](http://www.banshujiang.cn/)，[积微书斋](https://www.aibooks.cc/)，[爱分享](https://www.ishare1.cn/)。</description><guid isPermaLink="true">https://wliafe.github.io/about.html</guid><pubDate>Thu, 02 Jan 2025 13:57:31 +0000</pubDate></item></channel></rss>